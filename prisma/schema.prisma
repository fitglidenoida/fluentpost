// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  topics   Topic[]
  blogPosts BlogPost[]
  socialPosts SocialPost[]
  campaigns Campaign[]
  analytics Analytics[]
  aiResponses AIResponse[]
  securityAudits SecurityAudit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String
  keywords    String
  difficulty  String   @default("medium")
  viralScore  Float    @default(0)
  status      String   @default("researching")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogPosts   BlogPost[]
  socialPosts SocialPost[]
  researchData ResearchData[]
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  featuredImage String?
  status      String   @default("draft")
  publishedAt DateTime?
  seoTitle    String?
  seoDescription String?
  metaKeywords String?
  views       Int      @default(0)
  shares      Int      @default(0)
  likes       Int      @default(0)
  viralScore  Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId     String?
  topic       Topic?   @relation(fields: [topicId], references: [id])
  socialPosts SocialPost[]
  analytics   Analytics[]
}

model SocialPost {
  id          String   @id @default(cuid())
  content     String
  platform    String
  type        String?  @default("post")
  title       String?
  status      String   @default("draft")
  scheduledAt DateTime?
  publishedAt DateTime?
  postedAt    DateTime?
  engagement  String?
  views       Int      @default(0)
  shares      Int      @default(0)
  likes       Int      @default(0)
  comments    Int      @default(0)
  viralScore  Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogPostId  String?
  blogPost    BlogPost? @relation(fields: [blogPostId], references: [id])
  topicId     String?
  topic       Topic?   @relation(fields: [topicId], references: [id])
  analytics   Analytics[]
}

model ResearchData {
  id          String   @id @default(cuid())
  source      String
  data        String
  insights    String?
  relevance   Float    @default(0)
  createdAt   DateTime @default(now())

  topicId     String
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  goal        String
  targetAudience String?
  budget      Float?
  status      String   @default("planning")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics   Analytics[]
}

model Analytics {
  id          String   @id @default(cuid())
  type        String
  metric      String
  value       Float
  date        DateTime
  source      String?
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogPostId  String?
  blogPost    BlogPost? @relation(fields: [blogPostId], references: [id])
  socialPostId String?
  socialPost  SocialPost? @relation(fields: [socialPostId], references: [id])
  campaignId  String?
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
}

model AppSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AIResponse {
  id          String   @id @default(cuid())
  promptId    String   @unique
  promptType  String
  promptData  String   // JSON string of the original prompt
  response    String   // JSON string of the GPT response
  content     String   // Cleaned content ready for use
  status      String   @default("pending") // pending, processed, used
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SecurityAudit {
  id          String   @id @default(cuid())
  type        String
  userId      String?
  ipAddress   String
  userAgent   String
  details     String   // JSON string
  timestamp   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}
