import { NextRequest, NextResponse } from 'next/server'
import db from '@/lib/db'
import { z } from 'zod'

const aiResponseSchema = z.object({
  promptId: z.string(),
  promptType: z.string(),
  promptData: z.string(),
  response: z.string(),
  content: z.string().optional(),
  metadata: z.record(z.any()).optional(),
})

const generateContentSchema = z.object({
  type: z.enum(['blog', 'social', 'topic']),
  prompt: z.string().min(1),
  instructions: z.string().optional(),
})

function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text
  return text.slice(0, maxLength)
    .trim()
}

export async function GET() {
  try {
    const aiResponses = []

    return NextResponse.json({ aiResponses })
  } catch (error: any) {
    console.error('Error fetching AI responses:', error)
    return NextResponse.json(
      { error: 'Failed to fetch AI responses' },
      { status: 500 }
    )
  }
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json()
    
    if (body.type && body.prompt) {
      // Generate content request
      const validatedData = generateContentSchema.parse(body)
      
      // Mock AI content generation
      const mockContent = {
        blog: 'This is a mock blog post content generated by AI.',
        social: 'This is a mock social media post generated by AI! #awesome #ai',
        topic: 'This is a mock topic research generated by AI.'
      }
      
      const content = mockContent[validatedData.type] || 'Mock AI generated content'
      
      // Mock AI response creation
      const aiResponse = {
        id: `ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        promptId: 'mock_prompt',
        promptType: validatedData.type,
        promptData: validatedData.prompt,
        response: content,
        content,
        status: 'completed',
        createdAt: new Date()
      }

      return NextResponse.json(aiResponse, { status: 201 })
    } else {
      // Direct AI response creation
      const validatedData = aiResponseSchema.parse(body)
      
      const aiResponse = {
        id: `ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        ...validatedData,
        status: 'completed',
        createdAt: new Date()
      }

      return NextResponse.json(aiResponse, { status: 201 })
    }
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Validation error', details: error.issues },
        { status: 400 }
      )
    }

    console.error('Error creating AI response:', error)
    return NextResponse.json(
      { error: 'Failed to create AI response' },
      { status: 500 }
    )
  }
}